# This workflow builds and tests the .NET PE Loader project
name: .NET CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:

    # We MUST run on Windows to use Windows APIs and build/load PE files
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Add MSVC (C/C++ compiler) to PATH
      # This action sets up cl.exe and link.exe
      # Replaced microsoft/setup-msvc with the correct community-standard action
      uses: ilammy/msvc-dev-cmd@v1

    - name: Restore .NET dependencies
      # We must override the 'Platform=x64' env var set by the MSVC action
      # FIX: Removed the incorrect '.\Marina\' prefix
      run: dotnet restore Marina.sln /p:Platform="Any CPU"
    
    - name: Build C# Loader (Any CPU)
      # We build for "Any CPU" as this is the standard platform in most .sln files.
      # On an x64 runner, this will execute as an x64 process.
      # 1. Force OutputType to Exe
      # 2. Specify a clean output directory
      # FIX: Removed the incorrect '.\Marina\' prefix
      run: dotnet build Marina.csproj --no-restore --configuration Release /p:Platform="Any CPU" /p:OutputType=Exe --output .\build_output

    - name: Build C Test App (x64)
      # We compile our new CI-friendly C file
      # Assumes minimal_ci.c is in the root.
      run: |
        Set-Content -Path "minimal_ci.c" -Value @"
        #include <windows.h>
        const char msg[] = "MAGIC_STRING_SUCCESS: Hello from the reflectively loaded PE!\n";
        #define MSG_LEN (sizeof(msg) - 1) 
        void MyEntryPoint()
        {
            DWORD bytesWritten;
            HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
            WriteFile(hStdOut, msg, MSG_LEN, &bytesWritten, NULL);
            ExitThread(0); 
        }
        "@
        cl.exe /c /GS- /nologo minimal_ci.c
        link.exe /SUBSYSTEM:CONSOLE /NODEFAULTLIB /ENTRY:MyEntryPoint /OUT:minimal_ci.exe minimal_ci.obj kernel32.lib
      shell: powershell
      
    - name: Run Integration Test
      # 3. Use the correct path from our build output
      run: |
        .\build_output\Marina.exe minimal_ci.exe > output.txt 2>&1
      shell: powershell

    - name: Validate Test Output
      # This is the test! We check if our "magic string" was printed.
      # If it's not found, the workflow will fail.
      run: |
        $content = Get-Content ./output.txt
        $magicString = "MAGIC_STRING_SUCCESS"
        
        Write-Host "--- Test Output ---"
        Write-Host $content
        Write-Host "-------------------"

        if ($content -match $magicString) {
          Write-Host "Success: Magic string found in output."
          exit 0
        } else {
          Write-Host "Failure: Magic string NOT found in output."
          exit 1
        }
      shell: powershell

